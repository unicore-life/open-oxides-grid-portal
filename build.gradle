plugins {
    id 'application'
    id 'java'
    id 'groovy'
    id 'checkstyle'

    id 'com.moowork.node' version '1.1.1'
    id 'com.moowork.grunt' version '1.1.1'

    id 'io.spring.dependency-management' version '1.0.0.RELEASE'
    id 'org.springframework.boot' version '1.5.2.RELEASE'
    id 'pl.allegro.tech.build.axion-release' version '1.6.0'
}


scmVersion.tag.prefix = project.name

group = 'pl.edu.icm.unicore.portal'
project.version = scmVersion.version


ext {
    drivers = ['firefox', 'chrome', 'phantomJs']
    versions = [
            geb     : '1.1.1',
            spock   : '1.1-groovy-2.4-rc-3',
            selenium: '2.53.0',

            node    : '6.9.1',
            gradle  : '3.5'
    ]

    ext {
        chromeDriverVersion = '2.24'
        phantomJsVersion = '2.1.1'
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-thymeleaf',
            'org.springframework.boot:spring-boot-starter-security',

            'com.rometools:rome:1.7.1',
            'cglib:cglib:3.2.4',
            'org.apache.commons:commons-lang3:3.5',
            'org.springframework:spring-context-support:4.3.6.RELEASE',
            'net.sf.ehcache:ehcache:2.10.3',

            'pl.edu.icm.unity:unity-idm-spring-boot-starter:0.1.0-SNAPSHOT',
            'pl.edu.icm.unicore:unicore-spring-boot-starter:0.1.5'

    compile('org.springframework.boot:spring-boot-starter-undertow') {
        exclude group: 'io.undertow', module: 'undertow-websockets-jsr'
    }

    testCompile 'org.springframework.boot:spring-boot-starter-test',
            "org.gebish:geb-spock:${versions.geb}",
            "org.spockframework:spock-core:${versions.spock}",
            "org.spockframework:spock-spring:${versions.spock}",
            "org.seleniumhq.selenium:selenium-chrome-driver:${versions.selenium}",
            "org.seleniumhq.selenium:selenium-firefox-driver:${versions.selenium}"

    testCompile('com.codeborne:phantomjsdriver:1.3.0') {
        transitive = false
    }

    testRuntime "org.seleniumhq.selenium:selenium-support:${versions.selenium}"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://unicore-dev.zam.kfa-juelich.de/maven' }
    maven { url 'http://dl.bintray.com/unicore-life/maven' }
}


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

mainClassName = 'pl.edu.icm.oxides.OxidesGridPortal'
run {
    jvmArgs = ['-Dspring.profiles.active=local']
}

clean {
    delete "${rootDir}/bower_components"
    delete "${rootDir}/node_modules"
}

applicationDistribution.from('src/main/resources') {
    into 'config'
    include 'application-prod.yml'
    include 'grid-prod.properties'
    rename '(.+)-prod.(.+)', '$1.$2'
}

node {
    version = "${versions.node}"
    download = true
}

grunt {
    workDir = file("${project.projectDir}")
    colors = false
    bufferOutput = true
}

project.tasks.grunt_install.dependsOn npmInstall
project.tasks.grunt_build.dependsOn grunt_install
project.tasks.processResources.dependsOn grunt_build

project.tasks.grunt_check.dependsOn grunt_install
project.tasks.check.dependsOn grunt_check

task wrapper(type: Wrapper) {
    gradleVersion = "${versions.gradle}"
}


apply from: "gradle/osSpecificDownloads.gradle"

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
        systemProperty 'geb.env', driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

import org.apache.tools.ant.taskdefs.condition.Os

chromeTest {
    dependsOn unzipChromeDriver

    def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

phantomJsTest {
    dependsOn unzipPhantomJs

    def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
    systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

test {
//    dependsOn drivers.collect { tasks["${it}Test"] }
    dependsOn 'phantomJsTest'
    enabled = false
}
